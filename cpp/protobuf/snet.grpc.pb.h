// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf/snet.proto
#ifndef GRPC_protobuf_2fsnet_2eproto__INCLUDED
#define GRPC_protobuf_2fsnet_2eproto__INCLUDED

#include "protobuf/snet.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class SnetService final {
 public:
  static constexpr char const* service_full_name() {
    return "SnetService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Echo(::grpc::ClientContext* context, const ::EchoRequest& request, ::EchoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EchoResponse>> AsyncEcho(::grpc::ClientContext* context, const ::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EchoResponse>>(AsyncEchoRaw(context, request, cq));
    }
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::ResetRequest& request, ::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    virtual ::grpc::Status Info(::grpc::ClientContext* context, const ::InfoRequest& request, ::InfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InfoResponse>>(AsyncInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::InitRequest& request, ::InitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    virtual ::grpc::Status Tx(::grpc::ClientContext* context, const ::TxRequest& request, ::TxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TxResponse>> AsyncTx(::grpc::ClientContext* context, const ::TxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TxResponse>>(AsyncTxRaw(context, request, cq));
    }
    virtual ::grpc::Status Rx(::grpc::ClientContext* context, const ::RxRequest& request, ::RxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RxResponse>> AsyncRx(::grpc::ClientContext* context, const ::RxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RxResponse>>(AsyncRxRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EchoResponse>* AsyncEchoRaw(::grpc::ClientContext* context, const ::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TxResponse>* AsyncTxRaw(::grpc::ClientContext* context, const ::TxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RxResponse>* AsyncRxRaw(::grpc::ClientContext* context, const ::RxRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Echo(::grpc::ClientContext* context, const ::EchoRequest& request, ::EchoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EchoResponse>> AsyncEcho(::grpc::ClientContext* context, const ::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EchoResponse>>(AsyncEchoRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::ResetRequest& request, ::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    ::grpc::Status Info(::grpc::ClientContext* context, const ::InfoRequest& request, ::InfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InfoResponse>>(AsyncInfoRaw(context, request, cq));
    }
    ::grpc::Status Init(::grpc::ClientContext* context, const ::InitRequest& request, ::InitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    ::grpc::Status Tx(::grpc::ClientContext* context, const ::TxRequest& request, ::TxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TxResponse>> AsyncTx(::grpc::ClientContext* context, const ::TxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TxResponse>>(AsyncTxRaw(context, request, cq));
    }
    ::grpc::Status Rx(::grpc::ClientContext* context, const ::RxRequest& request, ::RxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RxResponse>> AsyncRx(::grpc::ClientContext* context, const ::RxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RxResponse>>(AsyncRxRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::EchoResponse>* AsyncEchoRaw(::grpc::ClientContext* context, const ::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::TxResponse>* AsyncTxRaw(::grpc::ClientContext* context, const ::TxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RxResponse>* AsyncRxRaw(::grpc::ClientContext* context, const ::RxRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Echo_;
    const ::grpc::RpcMethod rpcmethod_Reset_;
    const ::grpc::RpcMethod rpcmethod_Info_;
    const ::grpc::RpcMethod rpcmethod_Init_;
    const ::grpc::RpcMethod rpcmethod_Tx_;
    const ::grpc::RpcMethod rpcmethod_Rx_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Echo(::grpc::ServerContext* context, const ::EchoRequest* request, ::EchoResponse* response);
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::ResetResponse* response);
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::InfoRequest* request, ::InfoResponse* response);
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::InitRequest* request, ::InitResponse* response);
    virtual ::grpc::Status Tx(::grpc::ServerContext* context, const ::TxRequest* request, ::TxResponse* response);
    virtual ::grpc::Status Rx(::grpc::ServerContext* context, const ::RxRequest* request, ::RxResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::EchoRequest* request, ::EchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::EchoRequest* request, ::grpc::ServerAsyncResponseWriter< ::EchoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::ResetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::InfoRequest* request, ::InfoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::InfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::InfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* context, const ::InitRequest* request, ::InitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::InitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Tx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Tx() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Tx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tx(::grpc::ServerContext* context, const ::TxRequest* request, ::TxResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTx(::grpc::ServerContext* context, ::TxRequest* request, ::grpc::ServerAsyncResponseWriter< ::TxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Rx() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Rx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rx(::grpc::ServerContext* context, const ::RxRequest* request, ::RxResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRx(::grpc::ServerContext* context, ::RxRequest* request, ::grpc::ServerAsyncResponseWriter< ::RxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Echo<WithAsyncMethod_Reset<WithAsyncMethod_Info<WithAsyncMethod_Init<WithAsyncMethod_Tx<WithAsyncMethod_Rx<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::EchoRequest* request, ::EchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::ResetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::InfoRequest* request, ::InfoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* context, const ::InitRequest* request, ::InitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Tx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Tx() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Tx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Tx(::grpc::ServerContext* context, const ::TxRequest* request, ::TxResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Rx() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Rx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rx(::grpc::ServerContext* context, const ::RxRequest* request, ::RxResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::EchoRequest, ::EchoResponse>(std::bind(&WithStreamedUnaryMethod_Echo<BaseClass>::StreamedEcho, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Echo(::grpc::ServerContext* context, const ::EchoRequest* request, ::EchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EchoRequest,::EchoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::ResetRequest, ::ResetResponse>(std::bind(&WithStreamedUnaryMethod_Reset<BaseClass>::StreamedReset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::ResetResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ResetRequest,::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::InfoRequest, ::InfoResponse>(std::bind(&WithStreamedUnaryMethod_Info<BaseClass>::StreamedInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* context, const ::InfoRequest* request, ::InfoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InfoRequest,::InfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::InitRequest, ::InitResponse>(std::bind(&WithStreamedUnaryMethod_Init<BaseClass>::StreamedInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* context, const ::InitRequest* request, ::InitResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InitRequest,::InitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Tx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Tx() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::TxRequest, ::TxResponse>(std::bind(&WithStreamedUnaryMethod_Tx<BaseClass>::StreamedTx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Tx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Tx(::grpc::ServerContext* context, const ::TxRequest* request, ::TxResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TxRequest,::TxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Rx() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::RxRequest, ::RxResponse>(std::bind(&WithStreamedUnaryMethod_Rx<BaseClass>::StreamedRx, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Rx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rx(::grpc::ServerContext* context, const ::RxRequest* request, ::RxResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RxRequest,::RxResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Info<WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Tx<WithStreamedUnaryMethod_Rx<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Info<WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Tx<WithStreamedUnaryMethod_Rx<Service > > > > > > StreamedService;
};


#endif  // GRPC_protobuf_2fsnet_2eproto__INCLUDED
