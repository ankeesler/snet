// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protobuf/snet.proto

#include "protobuf/snet.pb.h"
#include "protobuf/snet.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* SnetService_method_names[] = {
  "/SnetService/Echo",
  "/SnetService/Reset",
  "/SnetService/Info",
  "/SnetService/Init",
  "/SnetService/Tx",
  "/SnetService/Rx",
};

std::unique_ptr< SnetService::Stub> SnetService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SnetService::Stub> stub(new SnetService::Stub(channel));
  return stub;
}

SnetService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Echo_(SnetService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(SnetService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Info_(SnetService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Init_(SnetService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tx_(SnetService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rx_(SnetService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SnetService::Stub::Echo(::grpc::ClientContext* context, const ::EchoRequest& request, ::EchoResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Echo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::EchoResponse>* SnetService::Stub::AsyncEchoRaw(::grpc::ClientContext* context, const ::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::EchoResponse>::Create(channel_.get(), cq, rpcmethod_Echo_, context, request);
}

::grpc::Status SnetService::Stub::Reset(::grpc::ClientContext* context, const ::ResetRequest& request, ::ResetResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ResetResponse>* SnetService::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request);
}

::grpc::Status SnetService::Stub::Info(::grpc::ClientContext* context, const ::InfoRequest& request, ::InfoResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Info_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::InfoResponse>* SnetService::Stub::AsyncInfoRaw(::grpc::ClientContext* context, const ::InfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::InfoResponse>::Create(channel_.get(), cq, rpcmethod_Info_, context, request);
}

::grpc::Status SnetService::Stub::Init(::grpc::ClientContext* context, const ::InitRequest& request, ::InitResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Init_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::InitResponse>* SnetService::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::InitResponse>::Create(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::Status SnetService::Stub::Tx(::grpc::ClientContext* context, const ::TxRequest& request, ::TxResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Tx_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::TxResponse>* SnetService::Stub::AsyncTxRaw(::grpc::ClientContext* context, const ::TxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::TxResponse>::Create(channel_.get(), cq, rpcmethod_Tx_, context, request);
}

::grpc::Status SnetService::Stub::Rx(::grpc::ClientContext* context, const ::RxRequest& request, ::RxResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Rx_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::RxResponse>* SnetService::Stub::AsyncRxRaw(::grpc::ClientContext* context, const ::RxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::RxResponse>::Create(channel_.get(), cq, rpcmethod_Rx_, context, request);
}

SnetService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      SnetService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SnetService::Service, ::EchoRequest, ::EchoResponse>(
          std::mem_fn(&SnetService::Service::Echo), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SnetService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SnetService::Service, ::ResetRequest, ::ResetResponse>(
          std::mem_fn(&SnetService::Service::Reset), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SnetService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SnetService::Service, ::InfoRequest, ::InfoResponse>(
          std::mem_fn(&SnetService::Service::Info), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SnetService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SnetService::Service, ::InitRequest, ::InitResponse>(
          std::mem_fn(&SnetService::Service::Init), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SnetService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SnetService::Service, ::TxRequest, ::TxResponse>(
          std::mem_fn(&SnetService::Service::Tx), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      SnetService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SnetService::Service, ::RxRequest, ::RxResponse>(
          std::mem_fn(&SnetService::Service::Rx), this)));
}

SnetService::Service::~Service() {
}

::grpc::Status SnetService::Service::Echo(::grpc::ServerContext* context, const ::EchoRequest* request, ::EchoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SnetService::Service::Reset(::grpc::ServerContext* context, const ::ResetRequest* request, ::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SnetService::Service::Info(::grpc::ServerContext* context, const ::InfoRequest* request, ::InfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SnetService::Service::Init(::grpc::ServerContext* context, const ::InitRequest* request, ::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SnetService::Service::Tx(::grpc::ServerContext* context, const ::TxRequest* request, ::TxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SnetService::Service::Rx(::grpc::ServerContext* context, const ::RxRequest* request, ::RxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


