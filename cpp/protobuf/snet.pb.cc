// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/snet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobuf/snet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class StatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Status> {
} _Status_default_instance_;
class EchoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EchoRequest> {
} _EchoRequest_default_instance_;
class EchoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EchoResponse> {
} _EchoResponse_default_instance_;
class ResetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetRequest> {
} _ResetRequest_default_instance_;
class ResetResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetResponse> {
} _ResetResponse_default_instance_;
class InfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoRequest> {
} _InfoRequest_default_instance_;
class InfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InfoResponse> {
} _InfoResponse_default_instance_;
class InitRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitRequest> {
} _InitRequest_default_instance_;
class InitResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InitResponse> {
} _InitResponse_default_instance_;
class PacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Packet> {
} _Packet_default_instance_;
class TxRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TxRequest> {
} _TxRequest_default_instance_;
class TxResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TxResponse> {
} _TxResponse_default_instance_;
class RxRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RxRequest> {
} _RxRequest_default_instance_;
class RxResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RxResponse> {
} _RxResponse_default_instance_;

namespace protobuf_protobuf_2fsnet_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoRequest, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EchoResponse, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetResponse, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitResponse, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Packet, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxRequest, packet_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxResponse, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxRequest, address_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RxResponse, packet_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Status)},
  { 6, -1, sizeof(EchoRequest)},
  { 12, -1, sizeof(EchoResponse)},
  { 18, -1, sizeof(ResetRequest)},
  { 24, -1, sizeof(ResetResponse)},
  { 30, -1, sizeof(InfoRequest)},
  { 35, -1, sizeof(InfoResponse)},
  { 40, -1, sizeof(InitRequest)},
  { 46, -1, sizeof(InitResponse)},
  { 52, -1, sizeof(Packet)},
  { 63, -1, sizeof(TxRequest)},
  { 69, -1, sizeof(TxResponse)},
  { 75, -1, sizeof(RxRequest)},
  { 81, -1, sizeof(RxResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EchoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EchoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Packet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TxResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RxRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RxResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protobuf/snet.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _Status_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EchoRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EchoResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ResetRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ResetResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _InfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _InfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _InitRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _InitResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Packet_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _TxRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _TxResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RxRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _RxResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Status_default_instance_.DefaultConstruct();
  _EchoRequest_default_instance_.DefaultConstruct();
  _EchoResponse_default_instance_.DefaultConstruct();
  _ResetRequest_default_instance_.DefaultConstruct();
  _ResetResponse_default_instance_.DefaultConstruct();
  _InfoRequest_default_instance_.DefaultConstruct();
  _InfoResponse_default_instance_.DefaultConstruct();
  _InitRequest_default_instance_.DefaultConstruct();
  _InitResponse_default_instance_.DefaultConstruct();
  _Packet_default_instance_.DefaultConstruct();
  _TxRequest_default_instance_.DefaultConstruct();
  _TxResponse_default_instance_.DefaultConstruct();
  _RxRequest_default_instance_.DefaultConstruct();
  _RxResponse_default_instance_.DefaultConstruct();
  _ResetResponse_default_instance_.get_mutable()->status_ = const_cast< ::Status*>(
      ::Status::internal_default_instance());
  _InitResponse_default_instance_.get_mutable()->status_ = const_cast< ::Status*>(
      ::Status::internal_default_instance());
  _TxRequest_default_instance_.get_mutable()->packet_ = const_cast< ::Packet*>(
      ::Packet::internal_default_instance());
  _TxResponse_default_instance_.get_mutable()->status_ = const_cast< ::Status*>(
      ::Status::internal_default_instance());
  _RxResponse_default_instance_.get_mutable()->status_ = const_cast< ::Status*>(
      ::Status::internal_default_instance());
  _RxResponse_default_instance_.get_mutable()->packet_ = const_cast< ::Packet*>(
      ::Packet::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023protobuf/snet.proto\"g\n\006Status\022\026\n\002id\030\001 "
      "\001(\0162\n.Status.Id\"E\n\002Id\022\013\n\007SUCCESS\020\000\022\013\n\007FA"
      "ILURE\020\001\022\013\n\007UNKNOWN\020\002\022\t\n\005EMPTY\020\003\022\r\n\tDUPLI"
      "CATE\020\004\"\036\n\013EchoRequest\022\017\n\007message\030\001 \001(\t\"\037"
      "\n\014EchoResponse\022\017\n\007message\030\001 \001(\t\"\037\n\014Reset"
      "Request\022\017\n\007address\030\001 \001(\005\"(\n\rResetRespons"
      "e\022\027\n\006status\030\001 \001(\0132\007.Status\"\r\n\013InfoReques"
      "t\"\016\n\014InfoResponse\"\036\n\013InitRequest\022\017\n\007addr"
      "ess\030\001 \001(\005\"\'\n\014InitResponse\022\027\n\006status\030\001 \001("
      "\0132\007.Status\"\233\001\n\006Packet\022\016\n\006length\030\001 \001(\005\022\020\n"
      "\010sequence\030\002 \001(\005\022\032\n\004type\030\003 \001(\0162\014.Packet.T"
      "ype\022\016\n\006source\030\004 \001(\005\022\023\n\013destination\030\005 \001(\005"
      "\022\017\n\007payload\030\006 \001(\014\"\035\n\004Type\022\010\n\004DATA\020\000\022\013\n\007C"
      "OMMAND\020\001\"$\n\tTxRequest\022\027\n\006packet\030\001 \001(\0132\007."
      "Packet\"%\n\nTxResponse\022\027\n\006status\030\001 \001(\0132\007.S"
      "tatus\"\034\n\tRxRequest\022\017\n\007address\030\001 \001(\005\">\n\nR"
      "xResponse\022\027\n\006status\030\001 \001(\0132\007.Status\022\027\n\006pa"
      "cket\030\002 \001(\0132\007.Packet2\342\001\n\013SnetService\022#\n\004E"
      "cho\022\014.EchoRequest\032\r.EchoResponse\022&\n\005Rese"
      "t\022\r.ResetRequest\032\016.ResetResponse\022#\n\004Info"
      "\022\014.InfoRequest\032\r.InfoResponse\022#\n\004Init\022\014."
      "InitRequest\032\r.InitResponse\022\035\n\002Tx\022\n.TxReq"
      "uest\032\013.TxResponse\022\035\n\002Rx\022\n.RxRequest\032\013.Rx"
      "ResponseB)\n%com.marshmallow.snet.service"
      ".protobufP\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 979);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf/snet.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protobuf_2fsnet_2eproto

const ::google::protobuf::EnumDescriptor* Status_Id_descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_enum_descriptors[0];
}
bool Status_Id_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Status_Id Status::SUCCESS;
const Status_Id Status::FAILURE;
const Status_Id Status::UNKNOWN;
const Status_Id Status::EMPTY;
const Status_Id Status::DUPLICATE;
const Status_Id Status::Id_MIN;
const Status_Id Status::Id_MAX;
const int Status::Id_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Packet_Type_descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_enum_descriptors[1];
}
bool Packet_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Packet_Type Packet::DATA;
const Packet_Type Packet::COMMAND;
const Packet_Type Packet::Type_MIN;
const Packet_Type Packet::Type_MAX;
const int Packet::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Status)
}

void Status::SharedCtor() {
  id_ = 0;
  _cached_size_ = 0;
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:Status)
  SharedDtor();
}

void Status::SharedDtor() {
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Status& Status::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:Status)
  id_ = 0;
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Status.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::Status_Id >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status.Id id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Status)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status.Id id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Status)
  size_t total_size = 0;

  // .Status.Id id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// .Status.Id id = 1;
void Status::clear_id() {
  id_ = 0;
}
::Status_Id Status::id() const {
  // @@protoc_insertion_point(field_get:Status.id)
  return static_cast< ::Status_Id >(id_);
}
void Status::set_id(::Status_Id value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Status.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoRequest::EchoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EchoRequest)
}
EchoRequest::EchoRequest(const EchoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:EchoRequest)
}

void EchoRequest::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EchoRequest::~EchoRequest() {
  // @@protoc_insertion_point(destructor:EchoRequest)
  SharedDtor();
}

void EchoRequest::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EchoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoRequest::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EchoRequest& EchoRequest::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

EchoRequest* EchoRequest::New(::google::protobuf::Arena* arena) const {
  EchoRequest* n = new EchoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EchoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EchoRequest)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EchoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EchoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EchoRequest.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EchoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EchoRequest)
  return false;
#undef DO_
}

void EchoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EchoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EchoRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:EchoRequest)
}

::google::protobuf::uint8* EchoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EchoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EchoRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:EchoRequest)
  return target;
}

size_t EchoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EchoRequest)
  size_t total_size = 0;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EchoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EchoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EchoRequest)
    MergeFrom(*source);
  }
}

void EchoRequest::MergeFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EchoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void EchoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRequest::CopyFrom(const EchoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EchoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRequest::IsInitialized() const {
  return true;
}

void EchoRequest::Swap(EchoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoRequest::InternalSwap(EchoRequest* other) {
  message_.Swap(&other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EchoRequest::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EchoRequest

// string message = 1;
void EchoRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EchoRequest::message() const {
  // @@protoc_insertion_point(field_get:EchoRequest.message)
  return message_.GetNoArena();
}
void EchoRequest::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EchoRequest.message)
}
#if LANG_CXX11
void EchoRequest::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EchoRequest.message)
}
#endif
void EchoRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EchoRequest.message)
}
void EchoRequest::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EchoRequest.message)
}
::std::string* EchoRequest::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:EchoRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EchoRequest::release_message() {
  // @@protoc_insertion_point(field_release:EchoRequest.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EchoRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:EchoRequest.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoResponse::EchoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EchoResponse)
}
EchoResponse::EchoResponse(const EchoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:EchoResponse)
}

void EchoResponse::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EchoResponse::~EchoResponse() {
  // @@protoc_insertion_point(destructor:EchoResponse)
  SharedDtor();
}

void EchoResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EchoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EchoResponse::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EchoResponse& EchoResponse::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

EchoResponse* EchoResponse::New(::google::protobuf::Arena* arena) const {
  EchoResponse* n = new EchoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EchoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:EchoResponse)
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EchoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EchoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EchoResponse.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EchoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EchoResponse)
  return false;
#undef DO_
}

void EchoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EchoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EchoResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:EchoResponse)
}

::google::protobuf::uint8* EchoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EchoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EchoResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:EchoResponse)
  return target;
}

size_t EchoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EchoResponse)
  size_t total_size = 0;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EchoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EchoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EchoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EchoResponse)
    MergeFrom(*source);
  }
}

void EchoResponse::MergeFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EchoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void EchoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoResponse::CopyFrom(const EchoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EchoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoResponse::IsInitialized() const {
  return true;
}

void EchoResponse::Swap(EchoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoResponse::InternalSwap(EchoResponse* other) {
  message_.Swap(&other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EchoResponse::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EchoResponse

// string message = 1;
void EchoResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EchoResponse::message() const {
  // @@protoc_insertion_point(field_get:EchoResponse.message)
  return message_.GetNoArena();
}
void EchoResponse::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EchoResponse.message)
}
#if LANG_CXX11
void EchoResponse::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EchoResponse.message)
}
#endif
void EchoResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EchoResponse.message)
}
void EchoResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EchoResponse.message)
}
::std::string* EchoResponse::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:EchoResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EchoResponse::release_message() {
  // @@protoc_insertion_point(field_release:EchoResponse.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EchoResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:EchoResponse.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetRequest::ResetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResetRequest)
}
ResetRequest::ResetRequest(const ResetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:ResetRequest)
}

void ResetRequest::SharedCtor() {
  address_ = 0;
  _cached_size_ = 0;
}

ResetRequest::~ResetRequest() {
  // @@protoc_insertion_point(destructor:ResetRequest)
  SharedDtor();
}

void ResetRequest::SharedDtor() {
}

void ResetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetRequest::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetRequest& ResetRequest::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetRequest* ResetRequest::New(::google::protobuf::Arena* arena) const {
  ResetRequest* n = new ResetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ResetRequest)
  address_ = 0;
}

bool ResetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResetRequest)
  return false;
#undef DO_
}

void ResetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:ResetRequest)
}

::google::protobuf::uint8* ResetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ResetRequest)
  return target;
}

size_t ResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResetRequest)
  size_t total_size = 0;

  // int32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResetRequest)
    MergeFrom(*source);
  }
}

void ResetRequest::MergeFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address() != 0) {
    set_address(from.address());
  }
}

void ResetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRequest::CopyFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest::IsInitialized() const {
  return true;
}

void ResetRequest::Swap(ResetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetRequest::InternalSwap(ResetRequest* other) {
  std::swap(address_, other->address_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetRequest::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetRequest

// int32 address = 1;
void ResetRequest::clear_address() {
  address_ = 0;
}
::google::protobuf::int32 ResetRequest::address() const {
  // @@protoc_insertion_point(field_get:ResetRequest.address)
  return address_;
}
void ResetRequest::set_address(::google::protobuf::int32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:ResetRequest.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetResponse::ResetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResetResponse)
}
ResetResponse::ResetResponse(const ResetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ResetResponse)
}

void ResetResponse::SharedCtor() {
  status_ = NULL;
  _cached_size_ = 0;
}

ResetResponse::~ResetResponse() {
  // @@protoc_insertion_point(destructor:ResetResponse)
  SharedDtor();
}

void ResetResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void ResetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetResponse::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetResponse& ResetResponse::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetResponse* ResetResponse::New(::google::protobuf::Arena* arena) const {
  ResetResponse* n = new ResetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ResetResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}

bool ResetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResetResponse)
  return false;
#undef DO_
}

void ResetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:ResetResponse)
}

::google::protobuf::uint8* ResetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ResetResponse)
  return target;
}

size_t ResetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResetResponse)
  size_t total_size = 0;

  // .Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResetResponse)
    MergeFrom(*source);
  }
}

void ResetResponse::MergeFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::Status::MergeFrom(from.status());
  }
}

void ResetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetResponse::CopyFrom(const ResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetResponse::IsInitialized() const {
  return true;
}

void ResetResponse::Swap(ResetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetResponse::InternalSwap(ResetResponse* other) {
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetResponse::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetResponse

// .Status status = 1;
bool ResetResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void ResetResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::Status& ResetResponse::status() const {
  // @@protoc_insertion_point(field_get:ResetResponse.status)
  return status_ != NULL ? *status_
                         : *::Status::internal_default_instance();
}
::Status* ResetResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::Status;
  }
  // @@protoc_insertion_point(field_mutable:ResetResponse.status)
  return status_;
}
::Status* ResetResponse::release_status() {
  // @@protoc_insertion_point(field_release:ResetResponse.status)
  
  ::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void ResetResponse::set_allocated_status(::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ResetResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoRequest::InfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfoRequest)
}
InfoRequest::InfoRequest(const InfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:InfoRequest)
}

void InfoRequest::SharedCtor() {
  _cached_size_ = 0;
}

InfoRequest::~InfoRequest() {
  // @@protoc_insertion_point(destructor:InfoRequest)
  SharedDtor();
}

void InfoRequest::SharedDtor() {
}

void InfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoRequest::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoRequest& InfoRequest::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoRequest* InfoRequest::New(::google::protobuf::Arena* arena) const {
  InfoRequest* n = new InfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InfoRequest)
}

bool InfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:InfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfoRequest)
  return false;
#undef DO_
}

void InfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:InfoRequest)
}

::google::protobuf::uint8* InfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:InfoRequest)
  return target;
}

size_t InfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InfoRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InfoRequest)
    MergeFrom(*source);
  }
}

void InfoRequest::MergeFrom(const InfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoRequest::CopyFrom(const InfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoRequest::IsInitialized() const {
  return true;
}

void InfoRequest::Swap(InfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoRequest::InternalSwap(InfoRequest* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoRequest::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InfoResponse::InfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfoResponse)
}
InfoResponse::InfoResponse(const InfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:InfoResponse)
}

void InfoResponse::SharedCtor() {
  _cached_size_ = 0;
}

InfoResponse::~InfoResponse() {
  // @@protoc_insertion_point(destructor:InfoResponse)
  SharedDtor();
}

void InfoResponse::SharedDtor() {
}

void InfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoResponse::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InfoResponse& InfoResponse::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

InfoResponse* InfoResponse::New(::google::protobuf::Arena* arena) const {
  InfoResponse* n = new InfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:InfoResponse)
}

bool InfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:InfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfoResponse)
  return false;
#undef DO_
}

void InfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:InfoResponse)
}

::google::protobuf::uint8* InfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:InfoResponse)
  return target;
}

size_t InfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InfoResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InfoResponse)
    MergeFrom(*source);
  }
}

void InfoResponse::MergeFrom(const InfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoResponse::CopyFrom(const InfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoResponse::IsInitialized() const {
  return true;
}

void InfoResponse::Swap(InfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InfoResponse::InternalSwap(InfoResponse* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InfoResponse::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InfoResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRequest::InitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:InitRequest)
}

void InitRequest::SharedCtor() {
  address_ = 0;
  _cached_size_ = 0;
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:InitRequest)
  SharedDtor();
}

void InitRequest::SharedDtor() {
}

void InitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRequest::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitRequest& InitRequest::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitRequest* InitRequest::New(::google::protobuf::Arena* arena) const {
  InitRequest* n = new InitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InitRequest)
  address_ = 0;
}

bool InitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitRequest)
  return false;
#undef DO_
}

void InitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:InitRequest)
}

::google::protobuf::uint8* InitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitRequest)
  return target;
}

size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitRequest)
  size_t total_size = 0;

  // int32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitRequest)
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address() != 0) {
    set_address(from.address());
  }
}

void InitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  return true;
}

void InitRequest::Swap(InitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRequest::InternalSwap(InitRequest* other) {
  std::swap(address_, other->address_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitRequest::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRequest

// int32 address = 1;
void InitRequest::clear_address() {
  address_ = 0;
}
::google::protobuf::int32 InitRequest::address() const {
  // @@protoc_insertion_point(field_get:InitRequest.address)
  return address_;
}
void InitRequest::set_address(::google::protobuf::int32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:InitRequest.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitResponse::InitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitResponse)
}
InitResponse::InitResponse(const InitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:InitResponse)
}

void InitResponse::SharedCtor() {
  status_ = NULL;
  _cached_size_ = 0;
}

InitResponse::~InitResponse() {
  // @@protoc_insertion_point(destructor:InitResponse)
  SharedDtor();
}

void InitResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void InitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitResponse::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitResponse& InitResponse::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitResponse* InitResponse::New(::google::protobuf::Arena* arena) const {
  InitResponse* n = new InitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:InitResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}

bool InitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitResponse)
  return false;
#undef DO_
}

void InitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:InitResponse)
}

::google::protobuf::uint8* InitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InitResponse)
  return target;
}

size_t InitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitResponse)
  size_t total_size = 0;

  // .Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitResponse)
    MergeFrom(*source);
  }
}

void InitResponse::MergeFrom(const InitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::Status::MergeFrom(from.status());
  }
}

void InitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitResponse::CopyFrom(const InitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitResponse::IsInitialized() const {
  return true;
}

void InitResponse::Swap(InitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitResponse::InternalSwap(InitResponse* other) {
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitResponse::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitResponse

// .Status status = 1;
bool InitResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void InitResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::Status& InitResponse::status() const {
  // @@protoc_insertion_point(field_get:InitResponse.status)
  return status_ != NULL ? *status_
                         : *::Status::internal_default_instance();
}
::Status* InitResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::Status;
  }
  // @@protoc_insertion_point(field_mutable:InitResponse.status)
  return status_;
}
::Status* InitResponse::release_status() {
  // @@protoc_insertion_point(field_release:InitResponse.status)
  
  ::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void InitResponse::set_allocated_status(::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InitResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Packet::kLengthFieldNumber;
const int Packet::kSequenceFieldNumber;
const int Packet::kTypeFieldNumber;
const int Packet::kSourceFieldNumber;
const int Packet::kDestinationFieldNumber;
const int Packet::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Packet::Packet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Packet)
}
Packet::Packet(const Packet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&destination_) -
    reinterpret_cast<char*>(&length_) + sizeof(destination_));
  // @@protoc_insertion_point(copy_constructor:Packet)
}

void Packet::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, reinterpret_cast<char*>(&destination_) -
    reinterpret_cast<char*>(&length_) + sizeof(destination_));
  _cached_size_ = 0;
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Packet::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Packet& Packet::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

Packet* Packet::New(::google::protobuf::Arena* arena) const {
  Packet* n = new Packet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:Packet)
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, reinterpret_cast<char*>(&destination_) -
    reinterpret_cast<char*>(&length_) + sizeof(destination_));
}

bool Packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Packet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Packet.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Packet_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 destination = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Packet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Packet)
  return false;
#undef DO_
}

void Packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->length(), output);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence(), output);
  }

  // .Packet.Type type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // int32 source = 4;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source(), output);
  }

  // int32 destination = 5;
  if (this->destination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->destination(), output);
  }

  // bytes payload = 6;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:Packet)
}

::google::protobuf::uint8* Packet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Packet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->length(), target);
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence(), target);
  }

  // .Packet.Type type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // int32 source = 4;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->source(), target);
  }

  // int32 destination = 5;
  if (this->destination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->destination(), target);
  }

  // bytes payload = 6;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Packet)
  size_t total_size = 0;

  // bytes payload = 6;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // int32 length = 1;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // int32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sequence());
  }

  // .Packet.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 source = 4;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  // int32 destination = 5;
  if (this->destination() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destination());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Packet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Packet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Packet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.destination() != 0) {
    set_destination(from.destination());
  }
}

void Packet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::Swap(Packet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Packet::InternalSwap(Packet* other) {
  payload_.Swap(&other->payload_);
  std::swap(length_, other->length_);
  std::swap(sequence_, other->sequence_);
  std::swap(type_, other->type_);
  std::swap(source_, other->source_);
  std::swap(destination_, other->destination_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Packet::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Packet

// int32 length = 1;
void Packet::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 Packet::length() const {
  // @@protoc_insertion_point(field_get:Packet.length)
  return length_;
}
void Packet::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:Packet.length)
}

// int32 sequence = 2;
void Packet::clear_sequence() {
  sequence_ = 0;
}
::google::protobuf::int32 Packet::sequence() const {
  // @@protoc_insertion_point(field_get:Packet.sequence)
  return sequence_;
}
void Packet::set_sequence(::google::protobuf::int32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:Packet.sequence)
}

// .Packet.Type type = 3;
void Packet::clear_type() {
  type_ = 0;
}
::Packet_Type Packet::type() const {
  // @@protoc_insertion_point(field_get:Packet.type)
  return static_cast< ::Packet_Type >(type_);
}
void Packet::set_type(::Packet_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Packet.type)
}

// int32 source = 4;
void Packet::clear_source() {
  source_ = 0;
}
::google::protobuf::int32 Packet::source() const {
  // @@protoc_insertion_point(field_get:Packet.source)
  return source_;
}
void Packet::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:Packet.source)
}

// int32 destination = 5;
void Packet::clear_destination() {
  destination_ = 0;
}
::google::protobuf::int32 Packet::destination() const {
  // @@protoc_insertion_point(field_get:Packet.destination)
  return destination_;
}
void Packet::set_destination(::google::protobuf::int32 value) {
  
  destination_ = value;
  // @@protoc_insertion_point(field_set:Packet.destination)
}

// bytes payload = 6;
void Packet::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Packet::payload() const {
  // @@protoc_insertion_point(field_get:Packet.payload)
  return payload_.GetNoArena();
}
void Packet::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Packet.payload)
}
#if LANG_CXX11
void Packet::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Packet.payload)
}
#endif
void Packet::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Packet.payload)
}
void Packet::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Packet.payload)
}
::std::string* Packet::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:Packet.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Packet::release_payload() {
  // @@protoc_insertion_point(field_release:Packet.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Packet::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:Packet.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxRequest::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxRequest::TxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TxRequest)
}
TxRequest::TxRequest(const TxRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_packet()) {
    packet_ = new ::Packet(*from.packet_);
  } else {
    packet_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:TxRequest)
}

void TxRequest::SharedCtor() {
  packet_ = NULL;
  _cached_size_ = 0;
}

TxRequest::~TxRequest() {
  // @@protoc_insertion_point(destructor:TxRequest)
  SharedDtor();
}

void TxRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete packet_;
  }
}

void TxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxRequest::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxRequest& TxRequest::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxRequest* TxRequest::New(::google::protobuf::Arena* arena) const {
  TxRequest* n = new TxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:TxRequest)
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) {
    delete packet_;
  }
  packet_ = NULL;
}

bool TxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Packet packet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TxRequest)
  return false;
#undef DO_
}

void TxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Packet packet = 1;
  if (this->has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->packet_, output);
  }

  // @@protoc_insertion_point(serialize_end:TxRequest)
}

::google::protobuf::uint8* TxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Packet packet = 1;
  if (this->has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->packet_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TxRequest)
  return target;
}

size_t TxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxRequest)
  size_t total_size = 0;

  // .Packet packet = 1;
  if (this->has_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->packet_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TxRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TxRequest)
    MergeFrom(*source);
  }
}

void TxRequest::MergeFrom(const TxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_packet()) {
    mutable_packet()->::Packet::MergeFrom(from.packet());
  }
}

void TxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxRequest::CopyFrom(const TxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRequest::IsInitialized() const {
  return true;
}

void TxRequest::Swap(TxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxRequest::InternalSwap(TxRequest* other) {
  std::swap(packet_, other->packet_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxRequest::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxRequest

// .Packet packet = 1;
bool TxRequest::has_packet() const {
  return this != internal_default_instance() && packet_ != NULL;
}
void TxRequest::clear_packet() {
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) delete packet_;
  packet_ = NULL;
}
const ::Packet& TxRequest::packet() const {
  // @@protoc_insertion_point(field_get:TxRequest.packet)
  return packet_ != NULL ? *packet_
                         : *::Packet::internal_default_instance();
}
::Packet* TxRequest::mutable_packet() {
  
  if (packet_ == NULL) {
    packet_ = new ::Packet;
  }
  // @@protoc_insertion_point(field_mutable:TxRequest.packet)
  return packet_;
}
::Packet* TxRequest::release_packet() {
  // @@protoc_insertion_point(field_release:TxRequest.packet)
  
  ::Packet* temp = packet_;
  packet_ = NULL;
  return temp;
}
void TxRequest::set_allocated_packet(::Packet* packet) {
  delete packet_;
  packet_ = packet;
  if (packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TxRequest.packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxResponse::TxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:TxResponse)
}
TxResponse::TxResponse(const TxResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:TxResponse)
}

void TxResponse::SharedCtor() {
  status_ = NULL;
  _cached_size_ = 0;
}

TxResponse::~TxResponse() {
  // @@protoc_insertion_point(destructor:TxResponse)
  SharedDtor();
}

void TxResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void TxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxResponse::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TxResponse& TxResponse::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

TxResponse* TxResponse::New(::google::protobuf::Arena* arena) const {
  TxResponse* n = new TxResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:TxResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}

bool TxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TxResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TxResponse)
  return false;
#undef DO_
}

void TxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:TxResponse)
}

::google::protobuf::uint8* TxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TxResponse)
  return target;
}

size_t TxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TxResponse)
  size_t total_size = 0;

  // .Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TxResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TxResponse)
    MergeFrom(*source);
  }
}

void TxResponse::MergeFrom(const TxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::Status::MergeFrom(from.status());
  }
}

void TxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxResponse::CopyFrom(const TxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxResponse::IsInitialized() const {
  return true;
}

void TxResponse::Swap(TxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxResponse::InternalSwap(TxResponse* other) {
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxResponse::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxResponse

// .Status status = 1;
bool TxResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void TxResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::Status& TxResponse::status() const {
  // @@protoc_insertion_point(field_get:TxResponse.status)
  return status_ != NULL ? *status_
                         : *::Status::internal_default_instance();
}
::Status* TxResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::Status;
  }
  // @@protoc_insertion_point(field_mutable:TxResponse.status)
  return status_;
}
::Status* TxResponse::release_status() {
  // @@protoc_insertion_point(field_release:TxResponse.status)
  
  ::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void TxResponse::set_allocated_status(::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TxResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RxRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RxRequest::RxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RxRequest)
}
RxRequest::RxRequest(const RxRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:RxRequest)
}

void RxRequest::SharedCtor() {
  address_ = 0;
  _cached_size_ = 0;
}

RxRequest::~RxRequest() {
  // @@protoc_insertion_point(destructor:RxRequest)
  SharedDtor();
}

void RxRequest::SharedDtor() {
}

void RxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxRequest::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RxRequest& RxRequest::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

RxRequest* RxRequest::New(::google::protobuf::Arena* arena) const {
  RxRequest* n = new RxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RxRequest)
  address_ = 0;
}

bool RxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RxRequest)
  return false;
#undef DO_
}

void RxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:RxRequest)
}

::google::protobuf::uint8* RxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RxRequest)
  return target;
}

size_t RxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RxRequest)
  size_t total_size = 0;

  // int32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RxRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RxRequest)
    MergeFrom(*source);
  }
}

void RxRequest::MergeFrom(const RxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address() != 0) {
    set_address(from.address());
  }
}

void RxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxRequest::CopyFrom(const RxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxRequest::IsInitialized() const {
  return true;
}

void RxRequest::Swap(RxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RxRequest::InternalSwap(RxRequest* other) {
  std::swap(address_, other->address_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RxRequest::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RxRequest

// int32 address = 1;
void RxRequest::clear_address() {
  address_ = 0;
}
::google::protobuf::int32 RxRequest::address() const {
  // @@protoc_insertion_point(field_get:RxRequest.address)
  return address_;
}
void RxRequest::set_address(::google::protobuf::int32 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:RxRequest.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RxResponse::kStatusFieldNumber;
const int RxResponse::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RxResponse::RxResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RxResponse)
}
RxResponse::RxResponse(const RxResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_packet()) {
    packet_ = new ::Packet(*from.packet_);
  } else {
    packet_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:RxResponse)
}

void RxResponse::SharedCtor() {
  ::memset(&status_, 0, reinterpret_cast<char*>(&packet_) -
    reinterpret_cast<char*>(&status_) + sizeof(packet_));
  _cached_size_ = 0;
}

RxResponse::~RxResponse() {
  // @@protoc_insertion_point(destructor:RxResponse)
  SharedDtor();
}

void RxResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
  if (this != internal_default_instance()) {
    delete packet_;
  }
}

void RxResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RxResponse::descriptor() {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RxResponse& RxResponse::default_instance() {
  protobuf_protobuf_2fsnet_2eproto::InitDefaults();
  return *internal_default_instance();
}

RxResponse* RxResponse::New(::google::protobuf::Arena* arena) const {
  RxResponse* n = new RxResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RxResponse)
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) {
    delete packet_;
  }
  packet_ = NULL;
}

bool RxResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RxResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Packet packet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RxResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RxResponse)
  return false;
#undef DO_
}

void RxResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // .Packet packet = 2;
  if (this->has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->packet_, output);
  }

  // @@protoc_insertion_point(serialize_end:RxResponse)
}

::google::protobuf::uint8* RxResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RxResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->status_, deterministic, target);
  }

  // .Packet packet = 2;
  if (this->has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->packet_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RxResponse)
  return target;
}

size_t RxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RxResponse)
  size_t total_size = 0;

  // .Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // .Packet packet = 2;
  if (this->has_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->packet_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RxResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RxResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RxResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RxResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RxResponse)
    MergeFrom(*source);
  }
}

void RxResponse::MergeFrom(const RxResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RxResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::Status::MergeFrom(from.status());
  }
  if (from.has_packet()) {
    mutable_packet()->::Packet::MergeFrom(from.packet());
  }
}

void RxResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RxResponse::CopyFrom(const RxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RxResponse::IsInitialized() const {
  return true;
}

void RxResponse::Swap(RxResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RxResponse::InternalSwap(RxResponse* other) {
  std::swap(status_, other->status_);
  std::swap(packet_, other->packet_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RxResponse::GetMetadata() const {
  protobuf_protobuf_2fsnet_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuf_2fsnet_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RxResponse

// .Status status = 1;
bool RxResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void RxResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::Status& RxResponse::status() const {
  // @@protoc_insertion_point(field_get:RxResponse.status)
  return status_ != NULL ? *status_
                         : *::Status::internal_default_instance();
}
::Status* RxResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::Status;
  }
  // @@protoc_insertion_point(field_mutable:RxResponse.status)
  return status_;
}
::Status* RxResponse::release_status() {
  // @@protoc_insertion_point(field_release:RxResponse.status)
  
  ::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void RxResponse::set_allocated_status(::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RxResponse.status)
}

// .Packet packet = 2;
bool RxResponse::has_packet() const {
  return this != internal_default_instance() && packet_ != NULL;
}
void RxResponse::clear_packet() {
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) delete packet_;
  packet_ = NULL;
}
const ::Packet& RxResponse::packet() const {
  // @@protoc_insertion_point(field_get:RxResponse.packet)
  return packet_ != NULL ? *packet_
                         : *::Packet::internal_default_instance();
}
::Packet* RxResponse::mutable_packet() {
  
  if (packet_ == NULL) {
    packet_ = new ::Packet;
  }
  // @@protoc_insertion_point(field_mutable:RxResponse.packet)
  return packet_;
}
::Packet* RxResponse::release_packet() {
  // @@protoc_insertion_point(field_release:RxResponse.packet)
  
  ::Packet* temp = packet_;
  packet_ = NULL;
  return temp;
}
void RxResponse::set_allocated_packet(::Packet* packet) {
  delete packet_;
  packet_ = packet;
  if (packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:RxResponse.packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
