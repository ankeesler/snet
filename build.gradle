/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

// Global project properties.
version = '0.0.0.0'

defaultTasks 'build'

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

apply plugin: 'checkstyle'

apply plugin: 'com.google.protobuf'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
  }
}

repositories {
  mavenLocal()
  jcenter()
}

dependencies {
  compile group: 'com.google.guava',    name: 'guava',         version: '22.0'
  compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.4.0'
  compile group: 'io.grpc',             name: 'grpc-netty',    version: '1.4.0'
  compile group: 'io.grpc',             name: 'grpc-protobuf', version: '1.4.0'
  compile group: 'io.grpc',             name: 'grpc-stub',     version: '1.4.0'

  // TODO: this should only be test compile!
  compile group: 'junit', name: 'junit', version: '4.12'

  runtime group: 'io.netty', name: 'netty-all', version: '4.1.11.Final'
}

// Define the main class for the application
mainClassName = 'com.marshmallow.snet.app.SnetApp'

task testCpp(type: Exec) {
  description 'Run the C++ SNET Client unit test.'
  // TODO: how do I start a service before this?
  commandLine "make", "-C", "cpp", "test"
}

task cleanCpp(type: Exec) {
  description 'Clean the C++ SNET Client code.'
  commandLine "make", "-C", "cpp", "clean"
}

clean.dependsOn(cleanCpp)

def protobufDirectory = 'protobuf'

sourceSets {
  main {
    java {
      // TODO: this exclude isn't working!
      exclude 'src/main/java/com/marshmallow/snet/test/**'
    }
    proto {
      srcDirs = [protobufDirectory]
    }
  }
  test {
    resources {
      srcDirs = ['cfg']
    }
  }
}

// Protobuf plugin configuration
protobuf {

  generatedFilesBaseDir = "src"

  // Pull in the Protocol Buffers compiler
  protoc {
    artifact = 'com.google.protobuf:protoc:3.0.0'
  }

  // Pull in the Java gRPC Protocol Buffers plugin
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
    }
  }

  // Configure what actually runs when we generate from our .proto files
  generateProtoTasks {
    all().each { task ->
      task.builtins {
        // Run Java source code generation
        java { }
      }
      task.plugins {
        // Run gRPC source code generation
        grpc {
          // Use the same subdirectory as the protobuf code for legacy reasons
          outputSubDir = "java"
        }
      }

      // Have this task depend on our custom task for generating C++ code
      // There is currently no C++ gRPC plugin that can be downloaded with gradle
      task.dependsOn(generateCppProtobuf)
    }
  }
}

// C++ Protocol Buffer generation tasks

task cleanGenCpp(type: Delete) {
  description 'Delete C++ Google Protocol Buffer and gRPC generated code'
  delete fileTree(dir: 'cpp/protobuf', includes: ['*.cc', '*.h'])
}

task generateCppProtobuf(type: Exec, dependsOn: cleanGenCpp) {
  description 'Generate C++ Google Protocol Buffer and gRPC code'
  // TODO: stop using this hardcoded path!
  commandLine "/usr/local/bin/protoc",
              "--plugin=protoc-gen-grpc=/usr/local/bin/grpc_cpp_plugin",
              "--cpp_out=cpp",
              "--grpc_out=cpp",
              protobufDirectory + "/snet.proto"
}

checkstyle {
  configFile = file('checkstyle.xml')
  toolVersion = "6.17"
  ignoreFailures = false
  showViolations = true
}

[checkstyleMain, checkstyleTest].each() {
  it.exclude 'com/marshmallow/snet/service/protobuf/**'
}